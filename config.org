#+Title: Config

* Emacs
タイトルをバッファ名のみに
#+begin_src emacs-lisp
(setq frame-title-format '("%b"))
#+end_src

ベルを無効化
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

ファイル選択でウィンドウを表示しない様に
#+begin_src emacs-lisp
(setq use-file-dialog nil)
#+end_src

yes-or-no-pの代わりにy-or-n-pを表示
#+begin_src emacs-lisp
(setq use-short-answers t)
#+end_src

起動時のタイトル画面表示を抑制し、スクラッチバッファを開くように
#+begin_src emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-screen t)
#+end_src

複数ファイルを起動引数に与えたときに、バッファメニューを表示しない様に
#+begin_src emacs-lisp
(setq inhibit-startup-buffer-menu t)
#+end_src

行末の空白文字を可視化
#+begin_src emacs-lisp
(setq show-trailing-whitespace t)
#+end_src

各種GUIを非表示に
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

行番号を表示
#+begin_src emacs-lisp
(global-display-line-numbers-mode t)
#+end_src

カット、ヤンクをGUIのクリップボードと連携させる
#+begin_src emacs-lisp
(setq wl-copy-process nil)
(defun wl-copy (text)
  (setq wl-copy-process (make-process :name "wl-copy"
                                      :buffer nil
				      :command '("wl-copy" "-f" "-n")
				      :connection-type 'pipe
				      :noquery t))
  (process-send-string wl-copy-process text)
  (process-send-eof wl-copy-process))

(defun wl-paste ()
  (if (and wl-copy-process (process-live-p wl-copy-process))
      nil
    (shell-command-to-string "wl-paste -n | tr -d \\r")))

(setq interprogram-cut-function 'wl-copy)
(setq interprogram-paste-function 'wl-paste)
#+end_src

バックアップファイルの無効化
#+begin_src emacs-lisp
(setq make-backup-files nil
      backup-inhibited nil
      create-lockfiles nil)
#+end_src

デフォルトのタブの幅を4に設定
#+begin_src emacs-lisp
(setq tab-width 4)
#+end_src

タブの代わりに空白文字を挿入
#+begin_src emacs-lisp
(setq indent-tabs-mode nil)
#+end_src

フォントをDejaVuに変更
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "DejaVuSansM Nerd Font Mono"
		    :height 100
		    :weight 'normal
		    :width 'normal)
#+end_src

左右分割なら分割後の右画面、上下分割なら下画面にフォーカスするように変更
#+begin_src emacs-lisp
(defun split-window-below-and-switch ()
  (interactive)
  (split-window-below)
  (other-window 1))

(defun split-window-right-and-switch ()
  (interactive)
  (split-window-right)
  (other-window 1))

(global-set-key (kbd "C-x 2") 'split-window-below-and-switch)
(global-set-key (kbd "C-x 3") 'split-window-right-and-switch)
#+end_src

デフォルトではelispの計算時,Warning以上で画面を分割して表示
それをエラー以上に変更
#+begin_src emacs-lisp
(setq display-warning-minimum-level :error)
#+end_src

"C-SP"Cでの選択時にisearchを使用しても、選択を途切れない様に変更
#+begin_src emacs-lisp
(setq isearch-allow-scroll t)
#+end_src

"C-h"をヘルプからバックワードに変更
#+begin_src emacs-lisp
(global-set-key (kbd "C-h") 'delete-backward-char)
(keyboard-translate ?\C-h ?\C-?)
(global-set-key (kbd "C-?") 'help-command)
#+end_src

"M-f"の挙動を変更
#+begin_src emacs-lisp
(defun wrap-forward-word ()
  (interactive)
  (forward-word 2)
  (backward-word 1))
(global-set-key (kbd "M-f") 'wrap-forward-word)
#+end_src

"C-c C-d"でcdを呼び出す
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-d") 'cd)
#+end_src

"C-x r"でredoを出来る様に
#+begin_src emacs-lisp
(global-set-key (kbd "C-x r") 'undo-redo)
#+end_src

"C-a"で非空白文字の先頭であるならば、行の先頭へ移動
それ意外ならば非空白文字の先頭へ移動
#+begin_src emacs-lisp
(defun my-move-beginning-of-line ()
  "Move point to first non-whitespace character or beginning-of-line."
  (interactive "^")
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
(global-set-key (kbd "C-a") 'my-move-beginning-of-line)
#+end_src

引数のコマンドのパスを取得する関数
#+begin_src emacs-lisp
(defun get-path-to-command (command)
  "Get path to the executable command"
  (string-trim
   (shell-command-to-string
    (concat "which " command))))
#+end_src

LSP非稼動時におけるcapf
#+begin_src emacs-lisp
(defvar completion-functions
  '(cape-file
    cape-dabbrev
    cape-keyword
    yasnippet-capf))
#+end_src

* 日本語入力
** ddskk
日本語入力
#+begin_src emacs-lisp
(use-package ddskk
  :custom
  (skk-large-jisyo (expand-file-name "~/repos/github.com/skk-dev/dict/SKK-JISYO.L"))
  (default-input-method "japanese-skk")
  :config
  (require 'ccc)
  :bind
  (:map global-map
	("C-j" . skk-kakutei)))
#+end_src
- repo :: [[https://github.com/skk-dev/ddskk]]
- doc :: [[https://ddskk.readthedocs.io/ja/latest/]]

* 補完
** cape
completion-at-point-functionを提供
#+begin_src emacs-lisp
(use-package cape
  :init
  (setq completion-at-point-functions completion-functions))
  #+end_src
- repo :: [[https://github.com/minad/cape]]
- doc(elpa) :: [[https://elpa.gnu.org/packages/cape.html]]

* スニペット
** yasnippet
スニペットエンジン
=~/.emacs.d/snippets/= に設定有り
#+begin_src emacs-lisp
(use-package yasnippet
  :hook
  ((prog-mode . yas-minor-mode)
   (org-mode . yas-minor-mode))
  :custom
  (yas-keymap-disable-hook t)
  (yas-expand-from-trigger-key nil)
  (yas-snippet-dirs
   '("~/.emacs.d/snippets"))
  :config
  (yas-reload-all)
  :bind
  (:map global-map
	("M-]" . yas-next-field)
	("M-[" . yas-prev-field)))

#+end_src

** yasnippet-snippets
yasnippetのスニペット集
#+begin_src emacs-lisp
(use-package yasnippet-snippets)
#+end_src
- repo :: https://github.com/AndreaCrotti/yasnippet-snippets

** yasnippet-capf
yasnippetをcorfuで利用可能なようにcapfへの変換を行う
#+begin_src emacs-lisp
(use-package yasnippet-capf
  :after
  (corfu
   yasnippet))
 #+end_src
- repo :: [[https://github.com/elken/yasnippet-capf]]

* 構造 --- 括弧等
** electric-pair
対応する括弧の自動補完
#+begin_src emacs-lisp
(use-package electric
  :hook
  (minibuffer-setup-hook . (lambda () electric-pair-mode 0))
  (minibuffer-setup-hook . (lambda () electric-pair-mode 1))
  :init
  (electric-pair-mode t))
#+end_src


** paren
対応する括弧のハイライト
#+begin_src emacs-lisp
(use-package paren
  :custom
  (show-paren-style 'mixed)
  :init
  (show-paren-mode t))
#+end_src

** puni
Vimのテキストオブジェクトのような機能の提供
- 括弧内の削除など
#+begin_src emacs-lisp
(use-package puni
  :init
  (puni-global-mode t)
  :bind (:map puni-mode-map
	      ([remap delete-backward-char] . puni-backward-delete-char)
	      ([remap delete-forward-cahr] . puni-forward-delete-char)
	      ("M-h" . puni-backward-kill-word)
	      ("M-d" . puni-forward-kill-word)
	      ("C-)" . puni-slurp-forward)
              ("C-}" . puni-barf-forward)
              ("M-(" . puni-wrap-round)
              ("M-s" . puni-splice)
              ("M-r" . puni-raise)
              ("M-U" . puni-splice-killing-backward)
              ("M-z" . puni-squeeze)))
#+end_src
- repo :: [[https://github.com/AmaiKinono/puni]]

* Gitインタフェース
** magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
- repo :: [[https://github.com/magit/magit]]
- doc :: [[https://magit.vc/]]

* ミニバッファ
** vertico
ミニバッファへの候補の表示、補完
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+end_src
- repo :: [[https://github.com/minad/vertico]]

** orderless
ミニバッファのマッチパターンの調整
#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion))))
  (orderless-matching-styles '(
			       orderless-literal
			       orderless-prefixes
			       orderless-initialism
			       orderless-regexp)))
#+end_src
- repo :: [[https://github.com/oantolin/orderless]]

** marginalia
ミニバッファの候補にドキュメントを付与
#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src
- repo :: [[https://github.com/minad/marginalia]]

** embark
ミニバッファのアクションを追加
#+begin_src emacs-lisp
(use-package embark
  :bind
  (:map global-map
	([remap isearch-forward] . embark-isearch-forward)
	([remap isearch-backward] . embark-isearch-backward)
	("C-." . embark-act)))
#+end_src
- repo :: [[https://github.com/oantolin/embark]]

** embark-consult
#+begin_src emacs-lisp
(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
- repo :: [[https://github.com/emacs-straight/embark-consult]]

** consult
組込み関数の拡張、その他便利な関数の追加
#+begin_src emacs-lisp
(use-package consult
  :bind
  (:map global-map
	([remap switch-to-buffer] . consult-buffer)
	("C-x C-b" . consult-buffer-other-window)
	([remap imenu] . consult-imenu)
	("C-/" . consult-line)
	([remap goto-line] . consult-goto-line)
	("<f2> o l" . consult-outline)
	("<f2> f m" . consult-flymake)
	("<f2> r g" . consult-ripgrep)))
#+end_src
- repo :: [[https://github.com/minad/consult]]

* ファイルツリー
** neotree
ファイルツリーの表示
#+begin_src emacs-lisp
(use-package neotree
  :bind
  (:map global-map
	("<f5>" . neotree-toggle))
  :custom
  (neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src
- repo :: [[https://github.com/jaypei/emacs-neotree]]

* PDF
** pdf-tools
バッファへのPDFの表示
#+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1))))

(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
#+end_src
- repo :: [[https://github.com/vedang/pdf-tools]]

* ターミナル
** vterm
ターミナル
#+begin_src emacs-lisp
(use-package vterm
  :commands
  (vterm)
  :hook
  ((vterm-mode . (lambda ()
		   (local-set-key (kbd "C-h") 'vterm-send-backspace)))))
#+end_src
- repo :: [[https://github.com/akermu/emacs-libvterm]]

* Language settings
** c
#+begin_src emacs-lisp
(use-package cc-mode
  :mode
  (("\\.c\\'" . c-mode)
   ("\\.h\\'" . c-mode)
   ("\\.cpp\\'" . c++-mode)
   ("\\.hpp\\'" . c++-mode))
  :custom
  (c-default-style "k&r")
  (c-basic-offset 4))
#+end_src
- doc :: [[https://www.gnu.org/software/emacs/manual/html_mono/ccmode.html]]

** clojure
#+begin_src emacs-lisp
(use-package clojure-mode
  :mode
  (("\\.clj\\'" . clojure-mode)
   ("\\.cljs\\'" . clojurescript-mode)
   ("\\.cljc\\'" . clojurec-mode)))
#+end_src
- repo :: [[https://github.com/clojure-emacs/clojure-mode/]]

** clojure repl
clojureのREPL及びorg-babelでのclojureの実行のための設定
#+begin_src emacs-lisp
(use-package cider)
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider)
(setq cider-repl-pop-to-buffer-on-connect nil)
#+end_src
- repo :: [[https://github.com/clojure-emacs/cider]]
- HP :: [[https://cider.mx/]]

** nix
#+begin_src emacs-lisp
(use-package nix-mode
  :mode
  ("\\.nix\\'" . nix-mode))
#+end_src
- repo :: https://github.com/NixOS/nix-mode

** python
#+begin_src emacs-lisp
(use-package python-mode
  :mode
  ("\\.py\\'" . python-mode))
#+end_src
- repo :: [[https://github.com/emacsmirror/python-mode]]

** rust
#+begin_src emacs-lisp
(use-package rust-mode
  :mode
  ("\\.rs\\'")
  :custom
  (rust-mode-tree-sitter-derive t))
#+end_src
rust-modeの拡張
#+begin_src emacs-lisp
(use-package rustic
  :after
  (rust-mode)
  :custom
  (rustic-format-on-save t)
  (rustic-cargo-use-last-stored-auguments t)
  (rustic-lsp-client 'lsp-bridge))
#+end_src
cargoのインタフェース
#+begin_src emacs-lisp
(use-package cargo)
#+end_src

* LSP
#+begin_src emacs-lisp
(use-package lsp-bridge
  :custom
  (lsp-bridge-c-lsp-server "clangd")
  (lsp-bridge-python-lsp-server "pyright")
  (lsp-bridge-tex-lsp-server "texlab")
  (lsp-bridge-nix-lsp-server "nil")
  (lsp-bridge-enable-org-babel t)
  (lsp-bridge-enable-completion-in-minibuffer t)
  (lsp-bridge-enable-hover-diagnostic t)
  (acm-enable-capf t)
  (acm-enable-codeium t)
  :init
  (global-lsp-bridge-mode)
  :bind
  (:map acm-mode-map
	("C-m" . newline)
	("C-j" . newline)))
#+end_src

* Error/Diagnositcs
** flymake
#+begin_src emacs-lisp
(use-package flymake
  :bind
  (:map global-map
	("M-n" . flymake-goto-next-error)
	("M-p" . flymake-goto-prev-error)))
#+end_src
- doc :: [[https://www.gnu.org/software/emacs/manual/html_mono/flymake.html]]

* Org
** org
コア
#+begin_src emacs-lisp
(use-package org
  :hook
  (org-mode . (lambda ()
		(setq-local completion-at-point-functions (append completion-functions '(cape-elisp-block cape-elisp-symbol)))))
  :custom
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0)
  (org-use-speed-commands t)
  (org-directory "~/org")
  :bind
  (:map global-map
	("C-c a" . 'org-agenda)
	:map org-mode-map
	("C-c f h e" . 'org-fold-hide-entry)
	("C-c f h a" . 'org-fold-hide-block-all)
	("C-c f s e" . 'org-fold-show-entry)
	("C-c f s a" . 'org-fold-show-all)))
#+end_src
- HP :: [[https://orgmode.org/]]

** org-agenda
orgファイルから予定等を抽出
#+begin_src emacs-lisp
(use-package org-agenda
  :after
  (org)
  :custom
  (org-agenda-files '("~/org/todo.org" "~/org/schedule.org"))
  (org-agenda-span 'day)
  (org-agenda-skip-deadline-if-done nil)
  (org-agenda-skip-scheduled-if-done nil)
  (org-agenda-skip-deadline-prewarning-if-scheduled nil))
#+end_src
- repo :: [[https://orgmode.org/manual/Agenda-Views.html]]

** org-super-agenda
org-agendaにグループの機能を追加
#+begin_src emacs-lisp
(use-package org-super-agenda
  :custom
  (org-super-agenda-groups
   '((:name "Schedule"
	    :file-path "~/org/schedule.org"
	    :time-grid t)
     (:name "Important"
	    :file-path "~/org/todo.org"
	    :priority "A"
	    :order 1)
     (:name "Emacs"
	    :file-path "~/org/todo.org"
	    :tag "emacs"
	    :order 2)
     (:name "Linux"
	    :file-path "~/org/todo.org"
	    :tag "linux"
	    :order 3)
     (:name "Work"
	    :file-path "~/org/todo.org"
	    :tag "work"
	    :order 4)
     (:name "Develop"
	    :file-path "~/org/todo.org"
	    :tag "dev"
	    :order 5)
     (:name "Learning"
	    :file-path "~/org/todo.org"
	    :tag "learning"
	    :order 6)
     (:name "Search"
	    :file-path "~/org/todo.org"
	    :tag "search"
	    :order 7)
     (:name "Shopping"
	    :file-path "~/org/todo.org"
	    :tag "shopping"
	    :order 8)
     (:name "Nifty"
	    :file-path "~/org/todo.org"
	    :tag "nifty"
	    :order 9)))
  (org-super-agenda-mode t))
     #+end_src
- repo :: https://github.com/alphapapa/org-super-agenda

** org-capture
orgファイルへのワンショットの書き込み
#+begin_src emacs-lisp
(use-package org-super-agenda
  :custom
  (org-capture-templates
   '(("t" "Todo" entry (file "~/org/todo.org")
      "* TODO %?\n")
     ("s" "Schedule" entry (file "~/org/schedule.org")
      "* %?\n")))
  :bind
  (:map global-map
	("C-c c" . 'org-capture)))
#+end_src
- doc :: [[https://orgmode.org/manual/Capture.html]]
  
** org-jorunal
orgを使用した日誌
#+begin_src emacs-lisp
(use-package org-journal
  :after
  (org)
  :custom
  (org-journal-dir "~/org/journal/")
  (org-journal-file-format "%Y-%m-%d.org")
  :bind
  (:map global-map
	("C-c j n e" . org-journal-new-entry)
	("C-c j o c" . org-journal-open-current-journal-file)))
#+end_src
- repo :: [[https://github.com/bastibe/org-journal]]

** org-roam
orgを使用した分散ノート
#+begin_src emacs-lisp
(use-package org-roam
  :hook
  ((org-mode . (lambda ()
		 (local-set-key (kbd "C-c r t a") 'org-roam-tag-add)
		 (local-set-key (kbd "C-c r t r") 'org-roam-tag-remove)
		 (local-set-key (kbd "C-c r a a") 'org-roam-alias-add)
		 (local-set-key (kbd "C-c r a r") 'org-roam-alias-remove)
		 (local-set-key (kbd "C-c r n i") 'org-roam-node-insert))))
  :bind
  (:map global-map
	("C-c r n f" . org-roam-node-find)
	("C-c r d t" . org-roam-dailies-capture-today))
  :custom
  (org-roam-directory (file-truename "~/org/org-roam"))
  :config
  (org-roam-db-autosync-mode 1))
#+end_src
- repo :: https://github.com/org-roam/org-roam
- HP :: [[https://www.orgroam.com/]]

** org-caldav
orgとcaldavの同期
#+begin_src emacs-lisp
(use-package org-caldav
  :custom
  (org-caldav-calendars
  '((:calendar-id "67B2-67412200-1A7-7F1B4200" :files ("~/org/todo.org")
		  :inbox "~/org/todo.org")
    (:calendar-id "11D3-67412200-21D-48611280" :files ("~/org/schedule.org")
		  :inbox "~/org/schedule.org")) )
  (org-caldav-url (getenv "CALDAV_LINK"))
  (org-icalendar-timezone "Asia/Tokyo")
  (org-icalendar-include-todo 'all)
  (org-caldav-sync-todo t))
#+end_src
- repo :: [[https://github.com/dengste/org-caldav]]
  
** org-babel
orgのコードブロックの処理
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (clojure . t)
   (shell . t)))
#+end_src
- doc :: [[https://orgmode.org/worg/org-contrib/babel/]]

** org to latex
orgのlatexへのエクスポート
#+begin_src emacs-lisp
(use-package ox-latex
  :after
  (org)
  :custom
  (org-latex-pdf-process
   '("latexmk -lualatex -shell-escape -interaction=nonstopmode -file-line-error -synctex=1 -output-directory=%o %f"))
  (org-latex-src-block-backend 'listings)
  (org-latex-listings-options
   '(("basicstyle" "\\ttfamily")
     ("showstringspaces" "false")
     ("keywordstyle" "\\color{blue}\\textbf")
     ("commentstyle" "\\color{gray}")
     ("stringstyle" "\\color{green!70!black}")
     ("stringstyle" "\\color{red}")
     ("frame" "single")
     ("numbers" "left")
     ("numberstyle" "\\ttfamily")
     ("columns" "fullflexible")))
  :config
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[presentation]{beamer}
                 \\usepackage{luatexja}
                 \\usepackage{hyperref}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("jlreq"
                 "\\documentclass{jlreq}
                 \\usepackage{luatexja}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

(use-package ox-beamer
  :after
  (ox-latex)  )
#+end_src
- doc :: [[https://orgmode.org/worg/exporters/ox-overview.html]]

** org-modern
orgファイルのUIを改善
#+begin_src emacs-lisp
(use-package org-modern
  :custom
  (org-auto-align-tags nil)
  (org-tags-column 0)
  (org-fold-catch-invisible-edits 'show-and-error)
  (org-special-ctrl-a/e t)
  (org-insert-heading-respect-content t)
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-ellipsis "…")
  (org-agenda-tags-column 0)
  (org-agenda-block-separator ?─)
  (org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "◀── now ─────────────────────────────────────────────────"))

(with-eval-after-load 'org (global-org-modern-mode))
#+end_src
- repo :: [[https://github.com/minad/org-modern]]

** tramp
リモートへの接続
#+begin_src emacs-lisp
(use-package tramp
  :defer t)
#+end_src
- doc :: [[https://www.gnu.org/software/tramp/tramp-emacs.html]]

* EWW
** eww
#+begin_src emacs-lisp
(use-package eww
  :custom
  (shr-use-images t)
  (shr-use-colors t)
  (shr-use-fonts t)
  (shr-width nil)
  (url-automatic-caching t)
  (eww-buffer-name-function
   (lambda () (format "*eww: %s*" (or (plist-get eww-data :title) "No Title"))))
  (url-privacy-level '(email agent cookies lastlock))
  (eww-download-directory "~/Downloads/")
  (eww-use-external-browser-for-content-type "\\`\\(video/\\|audio/\\|application\ogg\\)")
  (eww-form-checkbox-selected-symbol "[X]")
  (eww-form-checkbox-symbol "[ ]")
  (eww-history-limit 100)
  (define-key eww-mode-map (kbd "C-s") 'isearch-forward)
  (define-key eww-mode-map (kbd "C-r") 'isearch-backward)
  :config
  (define-key eww-mode-map (kbd "B") 'eww-browse-with-external-browser))
#+end_src
- doc :: [[https://www.gnu.org/software/emacs/manual/html_mono/eww.html]]

** dom
#+begin_src emacs-lisp
(use-package dom
  :after
  (eww))
#+end_src

** shr
#+begin_src emacs-lisp
(use-package shr
  :after
  (eww)
  :custom
  (shr-use-fonts t)
  (shr-bullet "• "))
#+end_src

** eww-lnum
#+begin_src emacs-lisp
(use-package eww-lnum
  :after
  (eww)
  :config
  (define-key eww-mode-map (kbd "f") 'eww-lnum-follow)
  (define-key eww-mode-map (kbd "F") 'eww-lnum-universal))
#+end_src
- repo :: https://github.com/m00natic/eww-lnum

* Themes
** catppuccin-theme
#+begin_src emacs-lisp
(use-package catppuccin-theme
  :config
  (setq catppuccin-flavor 'latte))

(load-theme 'catppuccin :no-conform)
#+end_src
- repo :: [[https://github.com/catppuccin/emacs]]

** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init
  (doom-modeline-mode 1))
#+end_src
- repo :: [[https://github.com/seagle0128/doom-modeline]]

** nyan-mode
#+begin_src emacs-lisp
(use-package nyan-mode
  :hook
  (prog-mode . nyan-mode)
  :custom
  (nyan-wavy-trail t)
  (nyan-animate-nayncat t)
  (nayn-bar-length 16)
  (nyan-minimum-window-width 80)
  :config
  (nyan-mode 1))
#+end_src
- repo :: [[https://github.com/TeMPOraL/nyan-mode]]

** parrot
#+begin_src emacs-lisp
(use-package parrot
  :custom
  (parrot-num-rotations nil)
  :config
  (parrot-mode 1))
#+end_src
- repo :: [[https://github.com/dp12/parrot]]

** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :demand t)
#+end_src
- repo :: [[https://github.com/domtronn/all-the-icons.el]]

** nerd-icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :demand t)
#+end_src
- repo :: [[https://github.com/emacsmirror/nerd-icons]]

** kind-icon
#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
- repo :: [[https://github.com/jdtsmith/kind-icon]]

* Others
** emacs-direnv
#+begin_src emacs-lisp
(use-package direnv
  :config
  (direnv-mode))
#+end_src
- repo :: [[https://github.com/wbolster/emacs-direnv]]
